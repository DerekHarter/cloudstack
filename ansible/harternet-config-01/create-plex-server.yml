# This ansible playbook attempts to create and configure a working plex server on
# an ubuntu 22.04 Jammy server
#
#
#
#
#
- hosts: manager
  
  vars:
    server_name: plex-alternate
    service_offering: "Medium Instance"
    root_disk_size: 8
    vm_template_name: "Ubuntu Server 22.04 LTS (Jammy Jellyfish) x86_64"
    zone_name: "Zone1"
    network_name: "HarterHouseNet"
    manager_identity: ansible-management-key
    manager_key: 'keys/ansiblemanagement.key.pub'
    
  tasks:

    # Ensure that the needed server template is registerd and downloaded
    - name: Ensure that the needed server template image is registered and downloaded
      ngine_io.cloudstack.cs_template:
        name: "{{ vm_template_name }}"
        #name: "Ubuntu Server 22.04 LTS (Jammy Jellyfish) x86_64"
        url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img"
        display_text: "{{ vm_template_name }}"
        cross_zones: true
        hypervisor: "KVM"
        format: "RAW"
        os_type: "Other Ubuntu (64-bit)"

    # Note: If the server template was not registered, it will take some time to download.
    #    The following may not work until the template has finished downloading and
    #    being registered
    # Note: The following assumes that the guest isolated network has already been created
    #    and is configured with egress rules that allow the server to access the internet

    # Register our ansible management key to use to manage the plex server
    - name: Register our ansible management key to manage the plex server
      ngine_io.cloudstack.cs_sshkeypair:
        name: "{{ manager_identity }}"
        public_key: "{{ lookup('file', '{{ manager_key }}') }}"

    # Acquire a public IP address in the isolated network we are
    # attempting to provision the server in
    - name: Acquire public IP address for plex server
      ngine_io.cloudstack.cs_ip_address:
        network: "{{ network_name }}"
        zone: "{{ zone_name }}"
      register: public_ip_address

    - debug:
        msg: Acquired public ip address {{ public_ip_address.ip_address }}

    # Create running vm instance of the plex server
    # NOTE: default disk offering is too small, so increase to 10 GB
    - name: Create plex server instance
      ngine_io.cloudstack.cs_instance:
        name: "{{ server_name }}"
        zone: "{{ zone_name }}"
        template: "{{ vm_template_name }}"
        service_offering: "{{ service_offering }}"
        root_disk_size: "{{ root_disk_size }}"
        networks:
          - "{{ network_name }}"
        ssh_key: "{{ manager_identity }}"

    # Now we setup static NAT translation from the public ip address
    # we just acquired to the server on the isolated network.  This is
    # one way of assigning public ip addresses to servers.  All
    # requests to the public ip address will be statically tranlated
    # to be requests to/from this new server in the isolated network
    - name: Setup static NAT translation from the public ip we acquired to our plex server
      ngine_io.cloudstack.cs_staticnat:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        vm: "{{ server_name }}"

    # Add firewall rules to allow ingress on the public ip firewall now associated
    # with this server.  Here we just open up all traffic, but we could/should
    # be a bit more selective and only open up what is needed for the server
    - name: Allow all inbound TCP/UDP traffic on the public ip
      ngine_io.cloudstack.cs_firewall:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        cidr: 0.0.0.0/0
        start_port: 1
        end_port: 65535
        protocol: '{{ item }}'
      with_items:
        - tcp
        - udp
        
    - name: Allow all inbound ICMP traffic on the public ip
      ngine_io.cloudstack.cs_firewall:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        cidr: 0.0.0.0/0
        icmp_code: -1
        icmp_type: -1
        protocol: icmp

    # for the next set of tasks, add this new host to a temporary group
    # name, so that for next part we can configure the new server we created
    # from ansible as if it is part of the ansible inventory
    - name: Add this new server as a host in our temporary ansible inventory group
      add_host:
        name: "{{ public_ip_address.ip_address }}"
        hostname: "{{ server_name }}"
        groups: new_server

    # It takes a while for ssh to come up on the new server, before we try
    # and gather info in start of next step, first ensure the new host
    # ssh port 22 appears to be open
    - name: Wait for ssh to become available before contiuing to provision the new server
      wait_for:
        host: "{{ public_ip_address.ip_address }}"
        port: 22
        delay: 5



# At this point we have registered the server template, spun up the plex server from
# that template, acquired a public ip address for the server, set static NAT
# translation from the ip to the plex server, and set the ingress rules to allow
# traffic into the server.

# TODO: The instance comes up pretty quickly, but still not quick enough.
#    We are often failing at this point because can't quite ssh into the
#    running plex server yet.

# We need to now switch to provisioning the new plex server itself through ansible,
# using the ssh key we registered and injected into the server when it was created.
- hosts: new_server
  
  vars:
    ansible_user: "ubuntu"
    ansible_become: true

    plexserver_key_url: "https://downloads.plex.tv/plex-keys/PlexSign.key"
    plexserver_key: "/usr/share/keyrings/plexserver.gpg"
    plexserver_pkg_url: "https://downloads.plex.tv/repo/deb"

    media_server_ip: 192.168.0.2
    media_server_path: /export/plex
    nfs_mount_opts: "auto,nofail,noatime,nolock,intr,tcp,actimeo=1800"
    
  tasks:
    
    # Make sure node package list is updated and all packages upgraded
    - name: Update apt-get repo and cache
      apt:
        update_cache: yes

    - name: Upgrade all apt packages
      apt:
        upgrade: dist

    # Setup plexserver media package repository in this servers list of packages
    - name: Get the plexserver signing key to set up apt repository securely
      shell:
        cmd: curl {{ plexserver_key_url }} | gpg --dearmor > {{ plexserver_key }}
        warn: false

    - name: Add Plexserver package repository to the server list of packages
      template: src=roles/plex/templates/plexmediaserver.list dest=/etc/apt/sources.list.d/plexmediaserver.list

    - name: Update repository database to pull in plexmediaserver packages to server package list
      apt: update_cache=true
      
    # Install the plexmedia server package on this server
    - name: Install plexmediaserver package on plex server
      apt:
        name: plexmediaserver

    # Ensure plexmediaserver is enabled and starts on reboot
    - name: Ensure plexmediaserver is enabled and will start on server reboot
      systemd:
        name: plexmediaserver
        state: restarted
        enabled: true

    # need nfs-common packages to act as an nfs client to the media server
    - name: Ensure nfs common package installed to can act as nfs client
      apt:
        name: nfs-common
        
    # setup nfs to mount media files from media server
    # use boot=true to add to fstype file and make sure mounts are remounted on reboot
    - name: Mount media server nfs volumes containing plex media
      mount:
        src: "{{ media_server_ip }}:{{ media_server_path }}"
        path: /media/plex
        opts: "{{ nfs_mount_opts }}"
        boot: true
        state: mounted
        fstype: nfs
        
# At this point the plex media server is running and plex media is mounted.
# The next step is to configure the server and add libraries.  I don't know
# how to access plexmediaserver from the command line to do these tasks, most
# install walk throughs show using the web based access to configure media.
# One note, this configuration has to be run on a browser that is actually
# running locally on the plex server machine, which we can't do since this
# is setup as a server.  So need to create a http tunnel from localhost to
# configure media libraries, like this:
#
# $ ssh 192.168.0.158 -L 8888:localhost:32400
# $ ssh -i keys/ansiblemanagement.key -oIdentitiesOnly=yes ubuntu@192.168.0.158 -L 8888:localhost:32400
# This creates a tunnel locally on port 8888 to the plex web server serving on port 32400
# at the public ip we just created and assigned to the server (change 192.168.0.158
# for the allocated ip).
#
# Also need to connect to:
#
#    http://localhost:8888/web
#
# the first time.
