# global settings for proxy services
global
   tune.ssl.default-dh-param 2048
   tune.ssl.cachesize 100000
   tune.ssl.lifetime 600
   tune.ssl.maxrecord 1460
   tune.h2.initial-window-size 1048576
   ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
   ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
   ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
   ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
   #Use: openssl dhparam -out dhparam.pem 2048
   ssl-dh-param-file /etc/letsencrypt/ssl-dhparam.pem

defaults
   timeout connect 5000ms
   timeout client  5000ms
   timeout server  5000ms
   mode http
   balance roundrobin

# redirect all http traffic to https
frontend http
    bind 10.1.1.111:80
    mode http
    redirect scheme https code 301

# configure https front end to accept https traffic into
# this reverse proxy server
frontend https
    bind 10.1.1.111:443 ssl crt /etc/letsencrypt/live/plex.harter.pro/fullchain.pem alpha h2,http/1.1
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    compression algo gzip
    compression type  text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml
    acl host_plex hdr_beg(Host) -i plex.
    acl root_dir path_reg ^$|^/$
    acl no_plex_header req.hdr_cnt(X-Plex-Device-Name) -i 0
    redirect location https://plex.example.com:2096/web/index.html code 301 if no_plex_header root_dir host_plex
    use_backend plex if host_plex

    #default_backend plex
    #use_backend plex if { req_ssl_sni -i plex.harter.pro }

    #use_backend nginx if { req_ssl_sni -i www.harter.pro }
    #use_backend apache if { req_ssl_sni -i domain2.com }

# plex media server backend running on vm cloud machine
backend plex
    mode tcp
    option ssl-hello-chk
    server plex 192.168.0.157:32400 check
    
# if we want to run a nginx web server on same machine could
# use this example backend from the article
backend nginx
    mode tcp
    option ssl-hello-chk
    server nginx 127.0.0.1:443 check

# if we want to run an apache web server on same machine could
# use this example backend from the article
backend apache
    mode tcp
    option ssl-hello-chk
    server apache 127.0.0.2:443 check