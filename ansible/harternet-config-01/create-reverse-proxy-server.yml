# We configure a reverse proxy using HAProxy to act as frontend to other
# html/https servers in our network.
#
# Setup and ideas mostly cribbed from: https://www.linuxbabe.com/linux-server/run-apache-nginx-haproxy-on-same-server-debian-ubuntu-centos
#
#
#
- hosts: manager
  
  vars:
    server_name: proxy
    service_offering: "Medium Instance"
    root_disk_size: 10
    vm_template_name: "Ubuntu Server 22.04 LTS (Jammy Jellyfish) x86_64"
    zone_name: "Zone1"
    network_name: "HarterHouseNet"
    manager_identity: ansible-management-key
    manager_key: 'keys/ansiblemanagement.key.pub'
    
  tasks:

    # Ensure that the needed server template is registerd and downloaded
    - name: Ensure that the needed server template image is registered and downloaded
      ngine_io.cloudstack.cs_template:
        name: "{{ vm_template_name }}"
        #name: "Ubuntu Server 22.04 LTS (Jammy Jellyfish) x86_64"
        url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img"
        display_text: "{{ vm_template_name }}"
        cross_zones: true
        hypervisor: "KVM"
        format: "RAW"
        os_type: "Other Ubuntu (64-bit)"

    # Note: If the server template was not registered, it will take some time to download.
    #    The following may not work until the template has finished downloading and
    #    being registered
    # Note: The following assumes that the guest isolated network has already been created
    #    and is configured with egress rules that allow the server to access the internet
    
    # Register our ansible management key to use to manage the proxy server
    - name: Register our ansible management key to manage the proxy server
      ngine_io.cloudstack.cs_sshkeypair:
        name: "{{ manager_identity }}"
        public_key: "{{ lookup('file', 'keys/{{ manager_key }}') }}"

        
    # Acquire a public IP address in the isolated network we are
    # attempting to provision the server in
    - name: Acquire public IP address for proxy server
      ngine_io.cloudstack.cs_ip_address:
        network: "{{ network_name }}"
        zone: "{{ zone_name }}"
      register: public_ip_address

    - debug:
        msg: Acquired public ip address {{ public_ip_address.ip_address }}
        
    # Create running vm instance of the proxy server
    # NOTE: default disk offering is too small, so increase to 10 GB 
    - name: Create proxy server instance
      ngine_io.cloudstack.cs_instance:
        name: "{{ server_name }}"
        zone: "{{ zone_name }}"
        template: "{{ vm_template_name }}"
        service_offering: "{{ service_offering }}"
        root_disk_size: "{{ root_disk_size }}"
        networks:
          - "{{ network_name }}"
        ssh_key: "{{ manager_identity }}"

    # Now we setup static NAT translation from the public ip address
    # we just acquired to the server on the isolated network.  This is
    # one way of assigning public ip addresses to servers.  All
    # requests to the public ip address will be statically tranlated
    # to be requests to/from this new server in the isolated network
    - name: Setup static NAT translation from the public ip we acquired to our proxy server
      ngine_io.cloudstack.cs_staticnat:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        vm: "{{ server_name }}"

    # Add firewall rules to allow ingress on the public ip firewall now associated
    # with this server.  Here we just open up all traffic, but we could/should
    # be a bit more selective and only open up what is needed for the server
   - name: Allow all inbound TCP/UDP traffic on the public ip
      ngine_io.cloudstack.cs_firewall:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        cidr: 0.0.0.0/0
        start_port: 1
        end_port: 65535
        protocol: '{{ item }}'
      with_items:
        - tcp
        - udp
        
    - name: Allow all inbound ICMP traffic on the public ip
      ngine_io.cloudstack.cs_firewall:
        ip_address: "{{ public_ip_address.ip_address }}"
        zone: "{{ zone_name }}"
        cidr: 0.0.0.0/0
        icmp_code: -1
        icmp_type: -1
        protocol: icmp

    # for the next set of tasks, add this new host to a temporary group
    # name, so that for next part we can configure the new server we created
    # from ansible as if it is part of the ansible inventory
    - name: Add this new server as a host in our ansible management inventory
      add_host:
        name: "{{ public_ip_address.ip_address }}"
        groups: new_server

    # It takes a while for ssh to come up on the new server, before we try
    # and gather info in start of next step, first ensure the new host
    # ssh port 22 appears to be open
    - name: Wait for ssh to become available before contiuing to provision the new server
      wait_for:
        host: "{{ public_ip_address.ip_address }}"
        port: 22
        delay: 5



# At this point we have registered the server template, spun up the proxy server from
# that template, acquired a public ip address for the server, set static NAT
# translation from the ip to the plex server, and set the ingress rules to allow
# traffic into the server.

# We need to now switch to provisioning the new plex server itself through ansible,
# using the ssh key we registered and injected into the server when it was created.
- hosts: new_server
  vars:
    # identity information to connect to this new server
    ansible_user: "ubuntu"
    ansible_become: true
    
  tasks:

    # Make sure node package list is updated and all packages upgraded
    - name: Update apt-get repo and cache
      apt:
        update_cache: yes

    - name: Upgrade all apt packages
      apt:
        upgrade: dist

    # Install nginx and setup basic configuration for reverse proxy
    - name: Install the nginx package to use as reverse proxy
      apt:
        update_cache: true
        name: nginx

    # copy any generated certificates and keys needed for reverse proxy
    # configuration to the reverse proxy host
    - name: Copy the media self signed certificate for nginx ssl listen
      copy:
        src: "keys/media.crt"
        dest: "/etc/nginx/conf.d/media.crt"
    
    - name: Copy the media certificate private key for nginx ssl listen
      copy:
        src: "keys/media.key"
        dest: "/etc/nginx/conf.d/media.key"

    - name: Copy the cloud self signed certificate for nginx ssl listen
      copy:
        src: "keys/cloud.crt"
        dest: "/etc/nginx/conf.d/cloud.crt"
    
    - name: Copy the cloud certificate private key for nginx ssl listen
      copy:
        src: "keys/cloud.key"
        dest: "/etc/nginx/conf.d/cloud.key"
        
    # TODO: for the moment this template just hardcodes in the ip address
    #   configurations.  Not sure if worth it to parameterize this file, we could
    #   though pull out the relevant ip addresses relatively simply and just have
    #   them as vars here for a pretty flexible solution
    # TODO: actually need the private isolated network ip of the vm for the
    #   template here, need to get it in this script.
    - name: Configure the nginx web server for reverse proxy operations for plex server
      template:
        src: roles/proxy/templates/plex.conf
        dest: /etc/nginx/conf.d/plex.conf

    - name: Configure the nginx web server for reverse proxy operations for cloud server
      template:
        src: roles/proxy/templates/cloud.conf
        dest: /etc/nginx/conf.d/cloud.conf

    - name: Configure the nginx web server for reverse proxy operations for media server
      template:
        src: roles/proxy/templates/media.conf
        dest: /etc/nginx/conf.d/media.conf

    # Ensure nginx reverse proxy service is enabled and starts on reboot
    - name: Ensure nginx reverse reverse proxy service is enabled and will start on server reboot
      systemd:
        name: nginx
        state: restarted
        enabled: true
    
    # From this point, we install a tls certificate using certbot so that we
    # can get valid auth on https for the plex.harter.pro domain
    # Install python3 certbot
    - name: Install python3 certbot packages for nginx
      apt:
        name: python3-certbot-nginx
    
    # TODO: The following command is interactive, can we provide options to
    #   automate if needed?
    # NOTE: this also requires that the dns name given here plex.harter.pro
    #   is publicably routable, and that requests to this on port 80/443 show up
    #   here on this reverse proxy server machine at those ports.
    #   (e.g. for our home this means setting dns record for plex.harter.pro
    #   to route to home public ip, and setting port forwarding on home
    #   router from ports 80/443 to this new server ip.
    #- name: Use certbot to get a valid TLS certificate for plex.harter.pro domain
    #  command: certbot --nginx --agree-tos --redirect --hsts --staple-ocsp --email derek@harter.pro -d plex.harter.pro

    
        
