# gather the keys from all cloudstack management servers locally to this ansible management node
# TODO: in future if want to have multipe HA managers, will need to modify to support
#   downloading and injecting multiple cloudstack management keys
- hosts: manager
  tasks:
    - name: Fetch the management key from cloudstack manager to a local file on ansible manager
      fetch:
        src: "/var/lib/cloudstack/management/.ssh/id_rsa.pub"
        dest: "keys/manager-id_rsa.pub"
        flat: true

# now distribute keys to all cloudstack aganets
- hosts: agent
  tasks:
    - name: Copy cloudstack management key from ansible manager buffer to the agent node
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', 'keys/manager-id_rsa.pub') }}"

# a bit of a kludge, but we can try and killall of the processes still hanging around for
# the cloudstack user before we attempt to remove the user
# ensure the cloudstack user has been removed from nodes
- hosts: manager agent database
  tasks:
    - name: Kill all cloudstack processes so no error when we remove the user NOTE this is likely to fail here as cloudstack access has probably timed out now
      command: killall -u cloudstack -w
      ignore_errors: true
      
    - name: Remove temporary cloudstack user
      user:
        name: cloudstack
        groups: cloudstack
        state: absent
        remove: yes

# configure cloudstack manager server properties
# setup ssl/https access on the management node that serves the management web UI
# We are setting up a fake root certificate authority here (CA) and then
# signing a certificate for our domain name cloud01.harter.priv
# TODO: move these variables to global?  and especially move the password into the
#   secrets file.
- hosts: manager
  vars:
    key_dir: /etc/cloudstack/management
    key: "{{ key_dir }}/cloudstack.key"
    public_key: "{{ key_dir }}/cloudstack.pub"
    request: "{{ key_dir }}/cloudstack.csr"
    extensions: "{{ key_dir }}/cloudstack.ssl.config"
    certificate: "{{ key_dir }}/cloudstack.crt"
    pkcs12_file: "{{ key_dir }}/cloudstack.p12"
    keystore: "{{ key_dir }}/cloudstack.jks"
    keystore_pass: "Tbiwtts4U"
    subject: "/C=US/ST=Texas/L=Commerce/O=Harter House/OU=Harter Cloud/CN=cloud01.harter.priv/emailAddress==admin@cloud01.harter.priv"
  tasks:

    # Step 1, generate a key, signing requirest and self sign a certificate for our testing
    - name: Generate private key for a test server ssl certificate
      command: openssl genrsa -des3 -passout pass:{{ keystore_pass }} -out {{ key }} 4096

    - name: Generate certificate signing request (csr) file.  In future we could have this signed by a real CA or certbot
      command: openssl req -new -key {{ key }} -passin pass:{{ keystore_pass }} -extensions v3_ca -batch -out {{ request }}  -utf8 -subj '{{ subject }}'

    # NOTE: The subject alt name extension has to be set here to get the certificates to be
    #   accepted. Also some sources say CA needs to be false to add the certificate to
    #   a set of authorities (for example to firefox list of authorities), but others
    #   seem to need this to be true (can't import the certificate into firefox if this is false?)
    - name: Create a file of openssl extensions/constraints to sign the request with
      template:
        src: roles/manager/templates/cloudstack.ssl.config
        dest: "{{ extensions }}"

    - name: Generate signed certificate to be used by this cloudstack management host
      command: openssl x509 -req -sha256 -days 3650 -in {{ request }} -passin pass:{{ keystore_pass }} -signkey {{ key }} -extfile {{ extensions }} -out {{ certificate }}
        
    # Step 2, convert/combine the certificate and private key to pkcs12 format.
    - name: Convert and combine our key and self signed certificate for importation
      command: openssl pkcs12 -export -in {{ certificate }} -inkey {{ key }} -passin pass:{{ keystore_pass }} -name cloudstack -out {{ pkcs12_file }} -passout pass:{{ keystore_pass }}

    # Step 3, import the key (from pkcs12 file) and the certificate into a keystore file so that
    # cloudstack can use it
    - name: Import key into a keystore file that we create
      command: keytool -importkeystore -srckeystore {{ pkcs12_file }} -srcstoretype PKCS12 -srcstorepass {{ keystore_pass }} -destkeystore {{ keystore }} -deststorepass {{ keystore_pass }}

    # maybe not necessary, got error when trying to import:
    #   keytool error: java.lang.Exception: Certificate reply and certificate in keystore are identical
    #- name: Import the self signed certificate as well into the keystore
    #  command: keytool -importcert -trustcacerts -file {{ certificate }} -keystore {{ keystore }} -alias cloudstack -storepass {{ keystore_pass }}

    # Step 4, update the server.config file to enable https/ssl using this keystore
    - name: Ensure that https access enabled on management server
      lineinfile:
        path: /etc/cloudstack/management/server.properties
        regexp: '^https.enable.*'
        line: 'https.enable=true'

    - name: Ensure that keystore file set in properties
      lineinfile:
        path: /etc/cloudstack/management/server.properties
        regexp: '^https.keystore=.*'
        line: 'https.keystore=/etc/cloudstack/management/cloudstack.jks'

    - name: Ensure that keystore password is set in properties
      lineinfile:
        path: /etc/cloudstack/management/server.properties
        regexp: '^https.keystore.password=.*'
        line: 'https.keystore.password={{ keystore_pass }}'

    # Step 5, copy the certificate into the local management server list of
    #   authorized certificates.  We can do similar to copy the certificate file
    # to other machines we want to give CA ssl access over http to this signed certificate
    - name: Copy self signed certificate to the servers list of additional ca certificates 
      command: cp {{ certificate }} /usr/local/share/ca-certificates

    - name: Update list of authorized ca certificates on the management server
      command: update-ca-certificates
          
    - name: Increase management UI session timeout for convenience
      lineinfile:
        path: /etc/cloudstack/management/server.properties
        regexp: '^session.timeout=.*'
        line: 'session.timeout=60'
        
    - name: Restart the cloudstack management service to pick up https/ssl enabled
      service:
        name: cloudstack-management
        state: restarted
        

# Gather the certificate and the pkc12 certificate keystore back to the management server.
# These files are useful to import into browsers or other sources to setup CA authorization
# and stop annoying browser warning when testing cloudstack access over https/ssl
- hosts: manager
  # TODO: these are now copied from up above in same file, these definitely need to go
  #   into globals or combined elsewhere.
  vars:
    key_dir: /etc/cloudstack/management
    key: "{{ key_dir }}/cloudstack.key"
    public_key: "{{ key_dir }}/cloudstack.pub"
    certificate: "{{ key_dir }}/cloudstack.crt"
    pkcs12_file: "{{ key_dir }}/cloudstack.p12"
    keystore_pass: "Tbiwtts4U"
  tasks:
    - name: Fetch the management https/ssl certificate to the ansible management host
      fetch:
        src: "{{ certificate }}"
        dest: "keys/cloudstack.crt"
        flat: true

    - name: Fetch the management https/ssl pkcs12 keystore to the ansible management host
      fetch:
        src: "{{ pkcs12_file }}"
        dest: "keys/cloudstack.p12"
        flat: true

    - name: Generate the public signing key used for our management UI certificates
      command: openssl rsa -in {{ key }} -passin pass:{{ keystore_pass }} -out  {{ public_key }}

    - name: Fetch the management https/ssl public signing key to the  ansible management host
      fetch:
        src: "{{ public_key }}"
        dest: "keys/cloudstack.pub"
        flat: true

# setup cloudmonkey for command line admin tasks
- hosts: manager
  vars:
    cmk_url: "https://github.com/apache/cloudstack-cloudmonkey/releases/download/6.3.0/cmk.linux.x86-64"
    
  tasks:
    - name: Install cloudmonkey command line admin tool on the manager
      get_url:
        url: "{{ cmk_url }}"
        dest:  /usr/local/bin/cmk
        mode: u+x
      
    - name: Call cloud monkey sync to load apis and enable for initial use
      command: cmk sync

    # TODO: should we (re)configure the config file to use api keys and the https/ssl interface
    #   it would be similar/same as we do next here to configure the ansible/cs tool for
    #   https/ssl access

        
# Generate api key and secret and setup the cloudstack.ini file so that both cloud monkey and the cs cloudstack
# tool used by ansible work to access the api.
# NOTE: the cs tool access won't work until the ssl/https api is up and correctly configured
# NOTE: to test the cloudstack.ini file, do the following on the management host
#       $ python3
#       >>> from cs import CloudStack, read_config
#       >>> cs = CloudStack(**read_config())
#       >>> cs.listUsers()
#   The file created here is working if this reads the config and succeeds to access the api
- hosts: manager
  vars:
    endpoint_url: "https://cloud01.harter.priv:8443/client/api"
    
  tasks:
    - name: Ensure that the cs package used by the ansible cloudstack management lib is present
      apt:
        name: cs
        state: present

    - name: Lookup the default admin id to query their api keys
      shell: cmk list users name=admin | egrep '"id":' | awk '{print $2}' | tr -d ,
      register: user_id

    - name: Register/create a new set of api user keys for default admin user
      shell: cmk register userkeys id={{ user_id.stdout }}
            
    - name: Lookup the default admin user api key
      shell: cmk get userkeys id={{ user_id.stdout }} | egrep apikey | awk '{print $2}' | tr -d ,\"
      register: apikey
      
    - name: Lookup the default admin user secret key
      shell: cmk get userkeys id={{ user_id.stdout }} | egrep secretkey| awk '{print $2}' | tr -d ,\"
      register: secretkey

    - name: Generate cloudstack.ini file for the ansible cs cloudstack tool
      template:
        src: roles/manager/templates/cloudstack.ini
        dest: /root/.cloudstack.ini


